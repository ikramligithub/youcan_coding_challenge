{"ast":null,"code":"import axios from 'axios';\nimport mitt from 'mitt'; // Importer la bibliothèque pour les événements\n\nexport default {\n  data() {\n    return {\n      product: {\n        name: '',\n        // Autres propriétés de produit ici\n        categories: []\n      },\n      categories: []\n    };\n  },\n  methods: {\n    submitForm() {\n      // Envoyer le formulaire, vous pouvez mettre ici la logique d'envoi\n    },\n    updateCategories() {\n      axios.get(\"http://127.0.0.1:8000/api/categories\").then(({\n        data\n      }) => {\n        this.categories = data;\n      }).catch(error => {\n        console.error(\"Erreur lors de la récupération des catégories :\", error);\n      });\n    }\n  },\n  mounted() {\n    this.updateCategories(); // Mettre à jour les catégories au chargement du composant\n    this.$emitter = mitt(); // Initialiser l'émetteur d'événements\n    this.$emitter.on('category-added', this.updateCategories); // Écouter l'événement d'ajout de catégorie\n  },\n  beforeUnmount() {\n    this.$emitter.off('category-added', this.updateCategories); // Supprimer l'écouteur d'événement avant la destruction du composant\n  }\n};","map":{"version":3,"names":["axios","mitt","data","product","name","categories","methods","submitForm","updateCategories","get","then","catch","error","console","mounted","$emitter","on","beforeUnmount","off"],"sources":["C:\\Users\\IKRAM\\Coding_Cha\\app_codingchan\\src\\components\\CategoryForm.vue"],"sourcesContent":["<template>\n    <form @submit.prevent=\"submitForm\">\n      <div class=\"form-group\">\n        <label for=\"name\">Nom du Produit:</label>\n        <input id=\"name\" type=\"text\" class=\"form-control\" v-model=\"product.name\" required>\n      </div>\n      <!-- Autres champs de formulaire ici -->\n      <div class=\"form-group\">\n        <label for=\"categories\">Catégorie:</label>\n        <select id=\"categories\" class=\"form-control\" v-model=\"product.categories\" required>\n          <option v-for=\"category in categories\" :key=\"category.id\" :value=\"category.id\">{{ category.name }}</option>\n        </select>\n      </div>\n      <button type=\"submit\" class=\"btn btn-primary\">Ajouter</button>\n    </form>\n  </template>\n  \n  <script>\n  import axios from 'axios';\nimport mitt from 'mitt'; // Importer la bibliothèque pour les événements\n  \n  export default {\n    data() {\n      return {\n        product: {\n          name: '',\n          // Autres propriétés de produit ici\n          categories: []\n        },\n        categories: []\n      };\n    },\n    methods: {\n      submitForm() {\n        // Envoyer le formulaire, vous pouvez mettre ici la logique d'envoi\n      },\n      updateCategories() {\n        axios.get(\"http://127.0.0.1:8000/api/categories\")\n          .then(({ data }) => {\n            this.categories = data;\n          })\n          .catch(error => {\n            console.error(\"Erreur lors de la récupération des catégories :\", error);\n          });\n      }\n    },\n    mounted() {\n      this.updateCategories(); // Mettre à jour les catégories au chargement du composant\n      this.$emitter = mitt(); // Initialiser l'émetteur d'événements\n      this.$emitter.on('category-added', this.updateCategories); // Écouter l'événement d'ajout de catégorie\n    },\n    beforeUnmount() {\n      this.$emitter.off('category-added', this.updateCategories); // Supprimer l'écouteur d'événement avant la destruction du composant\n    }\n  }\n  </script>\n  \n  \n  <style scoped>\n  .navbar-brand {\n    font-size: 1.5rem;\n    font-weight: bold;\n  }\n  \n  .navbar-nav .nav-item .nav-link {\n    font-size: 1.2rem;\n  }\n  \n  .navbar-toggler-icon {\n    background-color: #fff;\n  }\n  \n  .navbar-dark .navbar-toggler {\n    border-color: transparent;\n  }\n  \n  .navbar-dark .navbar-toggler:focus,\n  .navbar-dark .navbar-toggler:active {\n    outline: none;\n    box-shadow: none;\n  }\n  </style>\n  "],"mappings":"AAkBE,OAAOA,KAAI,MAAO,OAAO;AAC3B,OAAOC,IAAG,MAAO,MAAM,EAAE;;AAEvB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,OAAO,EAAE;QACPC,IAAI,EAAE,EAAE;QACR;QACAC,UAAU,EAAE;MACd,CAAC;MACDA,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX;IAAA,CACD;IACDC,gBAAgBA,CAAA,EAAG;MACjBR,KAAK,CAACS,GAAG,CAAC,sCAAsC,EAC7CC,IAAI,CAAC,CAAC;QAAER;MAAK,CAAC,KAAK;QAClB,IAAI,CAACG,UAAS,GAAIH,IAAI;MACxB,CAAC,EACAS,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,iDAAiD,EAAEA,KAAK,CAAC;MACzE,CAAC,CAAC;IACN;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACN,gBAAgB,CAAC,CAAC,EAAE;IACzB,IAAI,CAACO,QAAO,GAAId,IAAI,CAAC,CAAC,EAAE;IACxB,IAAI,CAACc,QAAQ,CAACC,EAAE,CAAC,gBAAgB,EAAE,IAAI,CAACR,gBAAgB,CAAC,EAAE;EAC7D,CAAC;EACDS,aAAaA,CAAA,EAAG;IACd,IAAI,CAACF,QAAQ,CAACG,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAACV,gBAAgB,CAAC,EAAE;EAC9D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}